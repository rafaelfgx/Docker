services:
  arangodb:
    image: arangodb
    container_name: arangodb
    networks:
      - network
    ports:
      - "8529:8529"
    volumes:
      - arangodb:/var/lib/arangodb3
      - arangodb-apps:/var/lib/arangodb3-apps
    environment:
      ARANGO_ROOT_PASSWORD: P4ssW0rd!

  couchdb:
    image: couchdb
    container_name: couchdb
    networks:
      - network
    ports:
      - "5984:5984"
    volumes:
      - couchdb:/opt/couchdb/data
    environment:
      COUCHDB_USER: root
      COUCHDB_PASSWORD: P4ssW0rd!

  cratedb:
    image: crate
    container_name: cratedb
    networks:
      - network
    ports:
      - "4242:4200"
    command: crate -Cdiscovery.type=single-node
    volumes:
      - cratedb:/data
    environment:
      CRATE_HEAP_SIZE: 2g

  elk-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    container_name: elk-elasticsearch
    networks:
      - network
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elk-elasticsearch:/usr/share/elasticsearch/data
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.enrollment.enabled: false
      ES_JAVA_OPTS: -Xms512m -Xmx512m

  elk-kibana:
    image: docker.elastic.co/kibana/kibana:8.15.2
    container_name: elk-kibana
    depends_on:
      - elk-elasticsearch
    networks:
      - network
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elk-elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elk-elasticsearch:9200

  elk-logstash:
    image: docker.elastic.co/logstash/logstash:8.15.2
    container_name: elk-logstash
    depends_on:
      - elk-elasticsearch
    networks:
      - network
    ports:
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      ELASTICSEARCH_URL: http://elk-elasticsearch:9200

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - grafana-loki
      - prometheus
    networks:
      - network
    ports:
      - "3000:3000"
    volumes:
      - ./grafana.yml:/etc/grafana/provisioning/datasources/grafana-datasources.yml
      - grafana:/etc/grafana/provisioning/dashboards
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: true
      GF_FEATURE_TOGGLES_ENABLE: accessControlOnCall lokiLogsDataplane
      GF_INSTALL_PLUGINS: https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app

  grafana-loki:
    image: grafana/loki
    container_name: grafana-loki
    networks:
      - network
    ports:
      - "3100:3100"
    volumes:
      - grafana-loki:/loki

  grafana-promtail:
    image: grafana/promtail
    container_name: grafana-promtail
    depends_on:
      - grafana-loki
    networks:
      - network
    command: -config.file=/etc/promtail/docker-config.yaml
    volumes:
      - ./promtail.yml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock

  jenkins:
    image: jenkins/jenkins
    container_name: jenkins
    privileged: true
    user: root
    networks:
      - network
    ports:
      - "8050:8080"
      - "50000:50000"
    volumes:
      - jenkins:/var/jenkins_home

  kafka:
    image: apache/kafka
    container_name: kafka
    networks:
      - network
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: CONTROLLER://:9093,PLAINTEXT://:9094,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9094,EXTERNAL://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093

  kafka-admin:
    image: obsidiandynamics/kafdrop
    container_name: kafka-admin
    depends_on:
      - kafka
    networks:
      - network
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9094

  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    networks:
      - network
    ports:
      - "8060:8080"
    volumes:
      - keycloak:/data
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: root
      KEYCLOAK_ADMIN_PASSWORD: P4ssW0rd!

  localstack:
    image: localstack/localstack
    container_name: localstack
    networks:
      - network
    ports:
      - "4566:4566"
    environment:
      SERVICES: sqs,sqs-query,s3
    volumes:
      - ./localstack.sh:/etc/localstack/init/ready.d/localstack.sh
      - /var/run/docker.sock:/var/run/docker.sock

  mongodb:
    image: mongo
    container_name: mongodb
    networks:
      - network
    ports:
      - "27017:27017"
    volumes:
      - mongodb:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: P4ssW0rd!

  mongodb-admin:
    image: mongo-express
    container_name: mongodb-admin
    depends_on:
      - mongodb
    networks:
      - network
    ports:
      - "27018:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://admin:P4ssW0rd!@mongodb:27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: P4ssW0rd!
      ME_CONFIG_BASICAUTH: false

  mssql:
    image: mcr.microsoft.com/mssql/server
    container_name: mssql
    networks:
      - network
    ports:
      - "1434:1433"
    volumes:
      - mssql:/var/opt/mssql
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: P4ssW0rd!

  neo4j:
    image: neo4j
    container_name: neo4j
    networks:
      - network
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j:/data
    environment:
      NEO4J_AUTH: neo4j/P4ssW0rd!

  nginx:
    image: nginx
    container_name: nginx
    networks:
      - network
    ports:
      - "8888:80"
    labels:
      nginx: "nginx"

  postgres:
    image: postgres
    container_name: postgres
    networks:
      - network
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      TZ: GMT
      POSTGRES_DB: database
      POSTGRES_USER: root
      POSTGRES_PASSWORD: P4ssW0rd!

  postgres-admin:
    image: dpage/pgadmin4
    container_name: postgres-admin
    depends_on:
      - postgres
    networks:
      - network
    ports:
      - "5433:80"
    volumes:
      - postgres-admin:/var/lib/pgadmin
      - ./pgadmin.json:/pgadmin4/servers.json
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: P4ssW0rd!
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    networks:
      - network
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: P4ssW0rd!

  redis:
    image: redis
    container_name: redis
    networks:
      - network
    ports:
      - "6379:6379"
    command: redis-server --requirepass P4ssW0rd!
    volumes:
      - redis:/data

  redis-admin:
    image: rediscommander/redis-commander
    container_name: redis-admin
    networks:
      - network
    ports:
      - "6380:8081"
    environment:
      REDIS_HOSTS: redis
      REDIS_HOST: redis
      REDIS_PORT: redis:6379
      REDIS_PASSWORD: P4ssW0rd!
      HTTP_USER: root
      HTTP_PASSWORD: P4ssW0rd!

  rethinkdb:
    image: rethinkdb
    container_name: rethinkdb
    networks:
      - network
    ports:
      - "8070:8080"
    volumes:
      - rethinkdb:/data

networks:
  network:

volumes:
  arangodb:
  arangodb-apps:
  couchdb:
  cratedb:
  elk-elasticsearch:
  grafana:
  grafana-loki:
  influxdb-etc:
  influxdb-lib:
  influxdb-chronograf:
  influxdb-kapacitor:
  jenkins:
  keycloak:
  mongodb:
  mssql:
  neo4j:
  postgres:
  postgres-admin:
  prometheus:
  redis:
  rethinkdb: